/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Hasher, HasherInterface } from "../Hasher";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "_c",
        type: "uint8",
      },
      {
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "hash",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    type: "function",
  },
];

const _bytecode =
  "0x6060604052341561000c57fe5b5b60fc8061001b6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806367ef4c1314603a575bfe5b3415604157fe5b6061600480803560ff16906020019091908035906020019091905050607f565b60405180826000191660001916815260200191505060405180910390f35b60008282604051808360ff1660ff167f010000000000000000000000000000000000000000000000000000000000000002815260010182815260200192505050604051809103902090505b929150505600a165627a7a72305820333d9a7e88c6c046480c5e21f9985a0ab4927dd0d1bc0a0df1d27ef5f9aa48750029";

export class Hasher__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Hasher> {
    return super.deploy(overrides || {}) as Promise<Hasher>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Hasher {
    return super.attach(address) as Hasher;
  }
  connect(signer: Signer): Hasher__factory {
    return super.connect(signer) as Hasher__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HasherInterface {
    return new utils.Interface(_abi) as HasherInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Hasher {
    return new Contract(address, _abi, signerOrProvider) as Hasher;
  }
}
