/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RPS, RPSInterface } from "../RPS";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "_c1",
        type: "uint8",
      },
      {
        name: "_c2",
        type: "uint8",
      },
    ],
    name: "win",
    outputs: [
      {
        name: "w",
        type: "bool",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "j2Timeout",
    outputs: [],
    payable: false,
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "stake",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "c2",
    outputs: [
      {
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "c1Hash",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_c2",
        type: "uint8",
      },
    ],
    name: "play",
    outputs: [],
    payable: true,
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "j2",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastAction",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_c1",
        type: "uint8",
      },
      {
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "solve",
    outputs: [],
    payable: false,
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "j1",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "j1Timeout",
    outputs: [],
    payable: false,
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "TIMEOUT",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    type: "function",
  },
  {
    inputs: [
      {
        name: "_c1Hash",
        type: "bytes32",
      },
      {
        name: "_j2",
        type: "address",
      },
    ],
    payable: true,
    type: "constructor",
  },
];

const _bytecode =
  "0x606060405261012c600555604051604080610a36833981016040528080519060200190919080519060200190919050505b3460048190555033600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028160001916905550426006819055505b50505b610958806100de6000396000f300606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c4395b9146100ba578063294914a4146101015780633a4b66f11461011357806348e257cb146101395780634d03e3d21461016d57806353a04b051461019b57806380985af9146101b657806389f71d5314610208578063a5ddec7c1461022e578063c37597c61461025a578063c8391142146102ac578063f56f48f2146102be575bfe5b34156100c257fe5b6100e7600480803560ff1690602001909190803560ff169060200190919050506102e4565b604051808215151515815260200191505060405180910390f35b341561010957fe5b6101116103b4565b005b341561011b57fe5b610123610466565b6040518082815260200191505060405180910390f35b341561014157fe5b61014961046c565b6040518082600581111561015957fe5b60ff16815260200191505060405180910390f35b341561017557fe5b61017d61047f565b60405180826000191660001916815260200191505060405180910390f35b6101b4600480803560ff16906020019091905050610485565b005b34156101be57fe5b6101c6610556565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561021057fe5b61021861057c565b6040518082815260200191505060405180910390f35b341561023657fe5b610258600480803560ff16906020019091908035906020019091905050610582565b005b341561026257fe5b61026a61084a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102b457fe5b6102bc610870565b005b34156102c657fe5b6102ce610926565b6040518082815260200191505060405180910390f35b60008160058111156102f257fe5b8360058111156102fe57fe5b141561030d57600090506103ae565b6000600581111561031a57fe5b83600581111561032657fe5b141561033557600090506103ae565b600282600581111561034357fe5b81151561034c57fe5b06600284600581111561035b57fe5b81151561036457fe5b06141561038b5781600581111561037757fe5b83600581111561038357fe5b1090506103ae565b81600581111561039757fe5b8360058111156103a357fe5b1190506103ae565b5b5b5b92915050565b600060058111156103c157fe5b600360009054906101000a900460ff1660058111156103dc57fe5b1415156103e95760006000fd5b60055460065401421115156103fe5760006000fd5b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051809050600060405180830381858888f193505050505060006004819055505b565b60045481565b600360009054906101000a900460ff1681565b60025481565b6000600581111561049257fe5b600360009054906101000a900460ff1660058111156104ad57fe5b1415156104ba5760006000fd5b600454341415156104cb5760006000fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105285760006000fd5b80600360006101000a81548160ff0219169083600581111561054657fe5b0217905550426006819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000600581111561058f57fe5b600360009054906101000a900460ff1660058111156105aa57fe5b141515156105b85760006000fd5b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106155760006000fd5b6002546000191682826040518083600581111561062e57fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018281526020019250505060405180910390206000191614151561067b5760006000fd5b61069482600360009054906101000a900460ff166102e4565b156106fe57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002029081150290604051809050600060405180830381858888f193505050505061083d565b610717600360009054906101000a900460ff16836102e4565b1561078157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002029081150290604051809050600060405180830381858888f193505050505061083c565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051809050600060405180830381858888f1935050505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051809050600060405180830381858888f19350505050505b5b60006004819055505b5050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600581111561087d57fe5b600360009054906101000a900460ff16600581111561089857fe5b141515156108a65760006000fd5b60055460065401421115156108bb5760006000fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002029081150290604051809050600060405180830381858888f193505050505060006004819055505b565b600554815600a165627a7a723058201aa442aab60cc7c68e90b727f0c696200991ac41246b69b48880038988a424120029";

export class RPS__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _c1Hash: BytesLike,
    _j2: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<RPS> {
    return super.deploy(_c1Hash, _j2, overrides || {}) as Promise<RPS>;
  }
  getDeployTransaction(
    _c1Hash: BytesLike,
    _j2: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_c1Hash, _j2, overrides || {});
  }
  attach(address: string): RPS {
    return super.attach(address) as RPS;
  }
  connect(signer: Signer): RPS__factory {
    return super.connect(signer) as RPS__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RPSInterface {
    return new utils.Interface(_abi) as RPSInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RPS {
    return new Contract(address, _abi, signerOrProvider) as RPS;
  }
}
